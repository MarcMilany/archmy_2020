#!/bin/bash
#### Смотрите пометки (справочки) и доп.иформацию в самом скрипте! ####
apptitle="Arch Linux Fast Install v2.4 LegasyBIOS - Version: 2024.07.31.00.40.38 (GPLv3)"
baseurl=https://raw.githubusercontent.com/MarcMilany/archmy_2020/master/url%20links%20abbreviated/git%20url
cpl=0
skipfont="0"
fspkgs=""
EDITOR=nano
#EDITOR=nano visudo  # Выполните команду с правами суперпользователя
###
VIEWER_PROG_LANG="russian"  # Installer default language (Язык установки по умолчанию)
ARCHMY7L_LANG="russian"  # Installer default language (Язык установки по умолчанию)
script_path=$(readlink -f ${0%/*})  # эта опция канонизируется путем рекурсивного следования каждой символической ссылке в каждом компоненте данного имени; все, кроме последнего компонента должны существовать
###
umask 0022 # Определение окончательных прав доступа - Для суперпользователя (root) umask по умолчанию равна 0022
set -e # Эта команда остановит выполнение сценария после сбоя команды и будет отправлен код ошибки
# set -euxo pipefail  # прекращает выполнение скрипта, даже если одна из частей пайпа завершилась ошибкой
#####################
### Help and usage (--help or -h) (Справка)
_help() {
    echo -e "${BLUE}
Installation guide - Arch Wiki
${BOLD}For more information, see the wiki: \
${GREY}<https://wiki.archlinux.org/index.php/Installation_guide>${NC}"
}
###
### SHARED VARIABLES AND FUNCTIONS (ОБЩИЕ ПЕРЕМЕННЫЕ И ФУНКЦИИ)
### Shell color codes (Цветовые коды оболочки)
RED="\e[1;31m"; GREEN="\e[1;32m"; YELLOW="\e[1;33m"; GREY="\e[3;93m"
BLUE="\e[1;34m"; CYAN="\e[1;36m"; BOLD="\e[1;37m"; MAGENTA="\e[1;35m"; NC="\e[0m"
###
### Automatic error detection (Автоматическое обнаружение ошибок)
_set() {
    set [--abefhkmnptuvxBCHP] [-o option] [arg ...]
}
###
_set() {
    set -e "\n${RED}Error: ${YELLOW}${*}${NC}"
    _note "${MSG_ERROR}"
    sleep 1; $$
}
###
###############################
### Warning (Предупреждение)
_warning_banner() {
    echo -e "${YELLOW}
   ====================== ♥ Предупреждение ======================
${NC}
Цель сценария (скрипта) - это установка первоначально необходимого софта (пакетов) и запуск необходимых служб.
Смысл в том, что все изменения вы делаете предварительно в самом скрипте и получаете возможность быстрой установки утилит (пакетов), которые Вы решили установить (при условии, что Вы его изменили под себя, в противном случае скрипт установит софт (пакеты) прописанный изначально.
В процессе работы сценария (скрипта) Вам будут задаваться вопросы на установку той, или иной утилиты (пакета) - будьте внимательными! В скрипте есть утилиты (пакеты), которые устанавливаются из 'AUR'. Это 'Pacman gui' или 'Octopi', в зависимости от вашего выбора, и т.д.. Сам же 'AUR'-'yay' или 'pikaur' - скачивается с сайта 'Arch Linux', собирается и устанавливается. Остальной софт (пакеты) скачивается и устанавливается из 'Официальных репозиториев Arch Linux'. Если Вы сомневаетесь в своих действиях, скриптом можно пользоваться как шпаргалкой, открыв его в текстовом редакторе, копируя команды по установке необходимых пакетов, и запуска необходимых служб. В любой ситуации выбор всегда за вами. Вы либо гуляете под дождем, либо просто под ним мокнете.${RED}

  ***************************** ВНИМАНИЕ! *****************************
${NC}
Автор не несёт ответственности за любое нанесение вреда при использовании скрипта.
Вы используйте его на свой страх и риск, или изменяйте под свои личные нужды.
В данный момент сценарий (скрипта) находится в процессе доработки по прописыванию устанавливаемого софта (пакетов), и небольшой корректировке (Воен. Внесение поправок в наводку орудий по результатам наблюдений с наблюдательных пунктов).

${BLUE}===> ******************************************************* ${NC}"
}
###
### Display banner (Дисплей баннер)
_warning_banner
###
sleep 15
#echo ""
#echo -e "${MAGENTA}==> ${BOLD}Если у Вас беспроводное соединение, запустите nmtui и подключитесь к сети. ${NC}"
#echo 'Если у Вас беспроводное соединение, запустите nmtui и подключитесь к сети.'
# If you have a wireless connection, launch nmtui and connect to the network.
##################
clear
echo -e "${GREEN}
  <<< Начинается установка первоначально необходимого софта (пакетов) и запуск необходимых служб для системы Arch Linux >>>
${NC}"
# Installation of utilities (packages) for the Arch Linux system begins
echo -e "${BLUE}:: ${NC}Установка и настройка начата в $(date +%T)"
#echo "Установка и настройка начата в $(date +%T)"
# Installation and configuration started in $(date +%T)
###
echo ""
echo -e "${GREEN}=> ${NC}Для проверки интернета можно пропинговать какой-либо сервис"
#echo 'Для проверки интернета можно пропинговать какой-либо сервис'
# To check the Internet, you can ping a service
ping -c 2 archlinux.org  # Утилита ping - это очень простой инструмент для диагностики сети
# ping google.com -W 2 -c 1
## ping -l 3 ya.ru
###
echo -e "${CYAN}==> ${NC}Если пинг идёт едем дальше ... :)"
#echo 'Если пинг идёт едем дальше ... :)'
# If the ping goes we go further ... :)
sleep 1
###
echo ""
echo -e "${MAGENTA}==> ${NC}Давайте проверим наш часовой пояс ... :)"
#echo 'Давайте проверим наш часовой пояс ... :)'
# Let's check our time zone ... :)
timedatectl | grep "Time zone"
sleep 1
###
echo ""
echo -e "${BLUE}:: ${NC}Если NetworkManager запущен смотрим состояние интерфейсов"
#echo "Если NetworkManager запущен смотрим состояние интерфейсов"
# If NetworkManager is running look at the state of the interfaces
# Первым делом нужно запустить NetworkManager:
# sudo systemctl start NetworkManager
# Если NetworkManager запущен смотрим состояние интерфейсов (с помощью - nmcli):
nmcli general status
sleep 1
###
echo ""
echo -e "${BLUE}:: ${NC}Посмотреть имя хоста"
# View host name
nmcli general hostname
sleep 1
###
echo ""
echo -e "${BLUE}:: ${NC}Получаем состояние интерфейсов"
# Getting the state of interfaces
nmcli device status
sleep 1
###
echo ""
echo -e "${BLUE}:: ${NC}Смотрим список доступных подключений"
# See the list of available connections
nmcli connection show
sleep 1
###
echo ""
echo -e "${BLUE}:: ${NC}Смотрим состояние wifi подключения"
# Looking at the status of the wifi connection
nmcli radio wifi
sleep 1
## ---------------------------------------
## Посмотреть список доступных сетей wifi:
# nmcli device wifi list
## Теперь включаем:
# nmcli radio wifi on
## Или отключаем:
# nmcli radio wifi off
## Команда для подключения к новой сети wifi выглядит не намного сложнее. Например, давайте подключимся к сети TP-Link с паролем 12345678:
## nmcli device wifi connect "TP-Link" password 12345678 name "TP-Link Wifi"
## Если всё прошло хорошо, то вы получите уже привычное сообщение про создание подключения с именем TP-Link Wifi и это имя в дальнейшем можно использовать для редактирования этого подключения и управления им, как описано выше.
## ---------------------------------------
###
echo ""
echo -e "${BLUE}:: ${NC}Посмотрим данные о нашем соединение с помощью IPinfo..."
#echo " Посмотрим данные о нашем соединение с помощью IPinfo..."
# Let's look at the data about our connection using IP info...
echo -e "${CYAN}=> ${NC}С помощью IPinfo вы можете точно определять местонахождение ваших пользователей, настраивать их взаимодействие, предотвращать мошенничество, обеспечивать соответствие и многое другое."
echo " Надежный источник данных IP-адресов (https://ipinfo.io/) "
wget http://ipinfo.io/ip -qO -
sleep 03
###
echo ""
echo -e "${BLUE}:: ${NC}Узнаем версию и данные о релизе Arch'a ... :) "
#echo "Узнаем версию и данные о релизе Arch'a ... :)"
# Find out the version and release data for Arch ... :)
cat /proc/version
cat /etc/lsb-release.old
sleep 02
####################
clear
echo -e "${CYAN}
  <<< Установка обновлений для системы Arch Linux >>> ${NC}"
# Installation of utilities (packages) for the Arch Linux system begins
echo ""
echo -e "${GREEN}==> ${NC}Обновим вашу систему (базу данных пакетов)?"
#echo -e "${BLUE}:: ${NC}Обновим вашу систему (базу данных пакетов)"
#echo "Обновим вашу систему (базу данных пакетов)"
# Update your system (package database)
echo -e "${CYAN}=> ${BOLD}В сценарии (скрипте) присутствуют следующие варианты: ${NC}"
echo " 1 - Обновление базы данных пакетов плюс обновление самих пакетов (pacman -Syyu) "
echo -e "${RED}==> Важно! ${NC}Если при обновлении системы прилетели обновления ядра и установились, то Вам нужно желательно остановить исполнения сценария (скрипта), и выполнить команду по обновлению загрузчика 'grub' - sudo grub-mkconfig -o /boot/grub/grub.cfg , затем перезагрузить систему."
echo -e "${YELLOW}==> Примечание: ${BOLD}Загружаем базу данных пакетов независимо от того, есть ли какие-либо изменения в версиях или нет. ${NC}"
# Loading the package database regardless of whether there are any changes in the versions or not.
echo " 2 - Просто обновить базы данных пакетов пакмэна (pacman -Syy) "
echo -e "${YELLOW}==> Примечание: ${BOLD}Возможно Вас попросят ввести пароль пользователя (user). ${NC}"
echo " Будьте внимательны! Процесс установки, был прописан полностью автоматическим. "
# Be careful! The installation process was fully automatic.
echo " Если Вы сомневаетесь в своих действиях, ещё раз обдумайте... "
# If you doubt your actions, think again...
echo ""
while
echo " Действия ввода, выполняется сразу после нажатия клавиши "
    read -n1 -p "
    1 - Обновить и установить (pacman -Syyu),     2 - Обновить базы данных пакетов (pacman -Syy)

    0 - НЕТ - Пропустить обновление и установку: " upd_sys  # sends right after the keypress; # отправляет сразу после нажатия клавиши
    echo ''
    [[ "$upd_sys" =~ [^120] ]]
do
    :
done
if [[ $upd_sys == 0 ]]; then
  echo ""
  echo " Установка обновлений пропущена "
elif [[ $upd_sys == 1 ]]; then
  echo ""
  echo " Установка обновлений (базы данных пакетов) "
  sudo pacman -Syyu --noconfirm  # Обновление баз плюс обновление пакетов (--noconfirm - не спрашивать каких-либо подтверждений)
# sudo pacman -Syyu  # Обновим вашу систему (базу данных пакетов)
  echo ""
  echo " Обновление и установка выполнено "
elif [[ $upd_sys == 2 ]]; then
  echo ""
  echo " Обновим базы данных пакетов... "
# sudo pacman -Sy --noconfirm  # обновить списки пакетов из репозиториев
  sudo pacman -Syy  # обновление баз пакмэна (pacman)
  echo ""
  echo " Обновление базы данных выполнено "
fi
sleep 1
################

clear
echo -e "${MAGENTA}
  <<< Установка программ для просмотра изображений в Archlinux >>> ${NC}"
# Installing image viewer programs in Archlinux
echo ""
echo -e "${BLUE}:: ${NC}Установить Flameshot (создания скриншотов)?"
echo -e "${MAGENTA}:: ${BOLD}Flameshot - инструмент для создания и редактирования скриншотов в Linux. ${NC}"
echo " Что подкупило в Flameshot, так это то, что во время создания снимка имеется возможность редактирования, без необходимости предварительного сохранения снимка, т.е. создание и редактирование в одном окне или на лету. "
echo " Возможности программы Flameshot: Создание скриншота рабочего стола. Создание скриншота выбранной области. Создание скриншота активного окна программы. Редактирование скриншота: Добавление графических примитивов: стрелок, прямоугольников, окружностей, линий. Выделение маркером (полупрозрачное выделение). Размытие выделенной области. "
echo " Возможность прикрепить скриншот на рабочий стол (в плавающем окне). Копирование снимков в буфер обмена. Открытие снимка во внешней программе. Загрузка снимка на сервис Imgur. Изменение цвета интерфейса программы. Задание шаблона для имен файлов. Доступны предустановленные элементы для шаблона имени файла: год, день недели, месяц, время, час, минута, секунда, название месяца и другие. Всплывающие уведомления на рабочем столе. Поддержка командной строки. "
echo ""
while
echo " Действия ввода, выполняется сразу после нажатия клавиши "
    read -n1 -p "
    1 - Да установить,     0 - НЕТ - Пропустить установку: " in_screen  # sends right after the keypress; # отправляет сразу после нажатия клавиши
    echo ''
    [[ "$in_screen" =~ [^10] ]]
do
    :
done
if [[ $in_screen == 0 ]]; then
echo ""
echo " Установка утилит (пакетов) пропущена "
elif [[ $in_screen == 1 ]]; then
  echo ""
  echo " Установка Flameshot "
sudo pacman -Syy  # обновление баз пакмэна (pacman)  
sudo pacman -S --noconfirm --needed flameshot  # Мощное, но простое в использовании программное обеспечение для создания снимков экрана ; https://github.com/flameshot-org/flameshot ; https://archlinux.org/packages/extra/x86_64/flameshot/
echo ""
echo " Установка утилит (пакетов) выполнена "
fi

clear
echo ""
echo -e "${BLUE}:: ${NC}Установить digiKam (для управления цифровыми фотографиями)?"
echo -e "${MAGENTA}:: ${BOLD}digiKam - это это органайзер изображений на базе KDE со встроенными функциями редактирования с помощью архитектуры плагинов. Программа DigiKam органично интегрирована в среду рабочего стола KDE. Для корректного отображения значков (без пропущенных значков), когда вы не используете среду рабочего стола KDE, необходимо установить тему значков KDE (breeze-icons) и активировать ее в настройках Digikam. После установки вам следует настроить Digikam на использование значков: Перейдите в Настройки > Настроить digiKam > Разное, затем в меню Внешний вид выберите (Breeze) или (Breeze Dark) в качестве темы значка. Значки Breeze для других рабочих столов: Совместимо с KDE, GNOME, Xfce, Cinnamon, MATE, LXQt. Язык интерфейса: русский, английский и другие... Лицензия: GNU GPL. Интерфейс: Qt. ${NC}"
echo " Домашняя страница: https://www.digikam.org/ ; (https://sourceforge.net/software/product/digiKam/ ; https://archlinux.org/packages/extra/x86_64/digikam/ ; https://wiki.archlinux.org/title/Digikam). "  
echo -e "${MAGENTA}:: ${BOLD}Описание: Программа поддерживает импорт фотографий, RAW-файлов и видео напрямую с фотоаппарата, внешних устройств (SD карт, USB носителей и так далее). Позволяет настраивать и выполнять автоматическую каталогизацию во время импорта файлов. Например распределять файлы по альбомам, используя дату снимка. digiKam размещает файлы по альбомам. ${NC}"
echo " Есть возможность добавлять теги, выставлять оценки и добавлять пометки к каждому файлу. Поддерживается поиск и выборка файлов по различным критериям. Можно искать файлы по тегам, рейтингу, локации, названию, по EXIF, IPTC и XMP метаданным. Поддерживается работа с RAW-файлами. Программа имеет возможность просмотра альбомов на карте, используя гео-информацию в метаданных. " 
echo " Программа включает целый набор инструментов для редактирования фотографий: баланс цвета, коррекция яркости, контрастности, гаммы, кадрирование, изменение размера, изменение резкости, настройка кривых, формирование панорамы, смешение каналов, инструменты улучшения снимков, добавление текста, добавление водяного знака, преобразование в другие форматы и другие.  "
echo " Программа digiKam имеет очень гибкий интерфейс, который можно настраивать в широких пределах. При первом запуске программы открывается Визард, в котором нужно выполнить некоторые первичные настройки. Вам будет предложено выбрать директорию, в которой хранятся ваши фотографии. Позднее можно добавлять дополнительные директории через настройки программы. Также при первом запуске нужно указать директорию, в которой будут хранится данные самой программы (база данных программы). "
echo ""
while
echo " Действия ввода, выполняется сразу после нажатия клавиши "
    read -n1 -p "
    1 - Да установить,     0 - НЕТ - Пропустить установку: " in_digikam  # sends right after the keypress; # отправляет сразу после нажатия клавиши
    echo ''
    [[ "$in_digikam" =~ [^10] ]]
do
    :
done
if [[ $in_digikam == 0 ]]; then
echo ""
echo " Установка утилит (пакетов) пропущена "
elif [[ $in_digikam == 1 ]]; then
  echo ""
  echo " Установка digiKam "
sudo pacman -Syy  # обновление баз пакмэна (pacman)  
sudo pacman -S --noconfirm --needed digikam  # Расширенное приложение для управления цифровыми фотографиями ; https://www.digikam.org/ ; https://sourceforge.net/software/product/digiKam/ ; https://archlinux.org/packages/extra/x86_64/digikam/ ; https://wiki.archlinux.org/title/Digikam
############## Breeze-icons ##########
sudo pacman -S --noconfirm --needed breeze-icons  # Тема иконок Breeze ; https://community.kde.org/Frameworks ; https://archlinux.org/packages/extra/x86_64/breeze-icons/ ; https://github.com/KDE/breeze-icons
echo ""
echo " Установка утилит (пакетов) выполнена "
fi
######################## Справка ###################
### digikam-plugins-demo - https://github.com/cgilles/digikam-plugins-demo ; https://github.com/cgilles/digikam-plugins-demo.git
### Этот репозиторий содержит несколько демонстрационных кодов для написания новых внешних плагинов digiKam (Digikam::DPlugin). Он предоставляет 4 плагина: Универсальный инструмент ; Инструмент «Редактор изображений» ; Инструмент диспетчера пакетной очереди ; Raw Import for Image Editor. Этот плагин открывает RAW-файл в редакторе с помощью простого вызова командной строки с помощью инструмента dcraw.
### Плагины не зависят от фреймворка KDE. Плагины можно скомпилировать с помощью Qt5 или Qt6. 
### Breeze-icons — тема иконок, совместимая с freedesktop.org. Она разработана сообществом KDE как часть KDE Frameworks 5 и используется по умолчанию в KDE Plasma 5 и KDE Applications. Инструкции по использованию значков Breeze описаны на сайте develop.kde.org/hig .
### Значки Breeze для других рабочих столов: Совместимо с KDE, GNOME, Xfce, Cinnamon, MATE, LXQt.
########################################################

clear
echo ""
echo -e "${BLUE}:: ${NC}Установить Eog (Eye of GNOME) (для просмотра изображений)?"
echo -e "${MAGENTA}:: ${BOLD}Eog (Eye of GNOME) - это простая программа для просмотра графики для рабочего стола GNOME, которая использует библиотеку gdk-pixbuf. Она может работать с большими изображениями, масштабировать и прокручивать их при постоянном использовании памяти. Ее целью является простота и соответствие стандартам. Eye of GNOME также отображает EXIF-метаданные об изображении. ${NC}"
echo " В отличие от других программ просмотра, Eye of GNOME предоставляет только базовые возможности работы с изображениями такие как: масштабирование изображения, полноэкранный режим просмотра и интерполирование при увеличении изображения. (https://archlinux.org/packages/extra/x86_64/eog/ ; https://github.com/GNOME/eog ; Домашняя страница: http://projects.gnome.org/eog . "  
echo -e "${MAGENTA}:: ${BOLD}Описание Eog (Eye of GNOME) - Сильные стороны Eog: Поддерживаемые графические форматы: ANI, BMP, GIF, ICO, JPEG, PCX, PNG, PNM, RAS, SVG, TGA, TIFF, WBMP, XBM, XPM ; Перелистывание изображений - Space/Backspace и стрелка Вправо/стрелка Влево, масштаб - колесо мыши ; При отображении изображения применяется сглаживание ; Есть полноэкранный режим и режим слайд-шоу ; Можно развернуть изображение по часовой и против часовой стрелки, а так же отразить горизонтально и вертикально и т.д.. ${NC}"
echo " Слабые стороны Eog: Eye of GNOME работает заметно медленнее, чем другие приложения такого рода ; Панель предпросмотра можно разместить только снизу, при этом нельзя изменить её размер ; Отсутствуют инструменты редактирования изображений ; Не поддерживается GIF-анимация. " 
echo " Язык интерфейса: русский, английский ; Лицензия: GNU GPL вер.2. "
echo " В 2023 году разработчики GNOME осуществили релиз Loupe, который стал заменой Eye of GNOME ; (https://archlinux.org/packages/extra/x86_64/loupe/) (https://gitlab.gnome.org/GNOME/loupe). "
echo ""
while
echo " Действия ввода, выполняется сразу после нажатия клавиши "
    read -n1 -p "
    1 - Да установить,     0 - НЕТ - Пропустить установку: " in_eog  # sends right after the keypress; # отправляет сразу после нажатия клавиши
    echo ''
    [[ "$in_eog" =~ [^10] ]]
do
    :
done
if [[ $in_eog == 0 ]]; then
echo ""
echo " Установка утилит (пакетов) пропущена "
elif [[ $in_eog == 1 ]]; then
  echo ""
  echo " Установка Eog (Eye of GNOME) "
sudo pacman -Syy  # обновление баз пакмэна (pacman)  
sudo pacman -S --noconfirm --needed eog  #  Eye of Gnome: программа для просмотра и каталогизации изображений ; https://archlinux.org/packages/extra/x86_64/eog/ ; https://github.com/GNOME/eog
sudo pacman -S --noconfirm --needed eog-plugins  # Плагины для Eye of Gnome
echo ""
echo " Установка утилит (пакетов) выполнена "
fi

clear
echo ""
echo -e "${BLUE}:: ${NC}Установить Loupe (для просмотра изображений)?"
echo -e "${MAGENTA}:: ${BOLD}Loupe - это новое приложение для просмотра изображений в GNOME. Оно написано на безопасном для памяти языке программирования Rust и предлагает ряд функций, таких как: кнопки на экране для переключения между различными фотографиями, увеличения и уменьшения масштаба, перехода в полноэкранный режим и другие ; встроенный в интерфейс инструмент просмотра метаданных, который показывает такие данные, как местоположение, размер, разрешение, дата создания и т. д. ; поддержка клавиатурных и трекпада сочетаний клавиш ; опции копирования в буфер обмена, перемещения в корзину и печати изображения. ${NC}"
echo " Loupe может заменить существующий Eye of GNOME (eog) Image Viewer ; Домашняя страница: https://github.com/GNOME/loupe ; (https://gitlab.gnome.org/GNOME/loupe ; https://archlinux.org/packages/extra/x86_64/loupe/). "  
echo -e "${MAGENTA}:: ${BOLD}Image Viewer использует glycin для загрузки изображений. Вы можете проверить README glycin для получения более подробной информации о форматах, поддерживаемых загрузчиками по умолчанию. Однако glycin поддерживает добавление загрузчиков для дополнительных форматов. Поэтому поддерживаемые форматы в вашей системе могут различаться и могут быть изменены путем установки или удаления загрузчиков glycin. ${NC}"
echo " Если вы вручную собираете Loupe в своей системе с помощью Builder, убедитесь, что вы также установили ночную версию для работы всех функций. В противном случае версия для разработки не будет иметь требуемых разрешений Flatpak. " 
echo " В 2023 году разработчики GNOME осуществили релиз Loupe, который стал заменой Eye of GNOME. "
echo ""
while
echo " Действия ввода, выполняется сразу после нажатия клавиши "
    read -n1 -p "
    1 - Да установить,     0 - НЕТ - Пропустить установку: " in_loupe  # sends right after the keypress; # отправляет сразу после нажатия клавиши
    echo ''
    [[ "$in_loupe" =~ [^10] ]]
do
    :
done
if [[ $in_loupe == 0 ]]; then
echo ""
echo " Установка утилит (пакетов) пропущена "
elif [[ $in_loupe == 1 ]]; then
  echo ""
  echo " Установка Loupe (of GNOME) "
sudo pacman -Syy  # обновление баз пакмэна (pacman)  
sudo pacman -S --noconfirm --needed loupe  # Простой просмотрщик изображений для GNOME (лупа); https://archlinux.org/packages/extra/x86_64/loupe/ ; https://gitlab.gnome.org/GNOME/loupe
echo ""
echo " Установка утилит (пакетов) выполнена "
fi

clear
echo ""
echo -e "${BLUE}:: ${NC}Установить Viewnior (для просмотра изображений)?"
echo -e "${MAGENTA}:: ${BOLD}Viewnior - это элегантный и минималистичный просмотрщик изображений для систем Linux. Он поддерживает различные функции, такие как полноэкранный режим, слайд-шоу, поворот, переворот, обрезка и другие операции с изображениями. Он также имеет настраиваемое действие мыши и простой интерфейс. ${NC}"
echo " Просмотрщик изображений Viewnior использует модифицированную пользователем библиотеку GtkImageView. Эта библиотека обеспечивает быстрый и плавный просмотр изображений. "  
echo -e "${MAGENTA}:: ${BOLD}Viewnior может просматривать только выбранные изображения. Таким образом, вы можете отфильтровать нежелательные файлы. ${NC}"
echo " Также может автоматически определять среду рабочего стола и устанавливать соответствующее изображение в качестве обоев ; отображать метаданные EXIF ​​и IPTC. Оба содержат настройки камеры, местоположения и информацию о дате. " 
echo " Кроме того, вы можете открыть изображение с помощью Viewnior, непосредственно из файлового менеджера (viewnior ~/Downloads/test_image.jpg).  "
echo ""
while
echo " Действия ввода, выполняется сразу после нажатия клавиши "
    read -n1 -p "
    1 - Да установить,     0 - НЕТ - Пропустить установку: " in_viewnior  # sends right after the keypress; # отправляет сразу после нажатия клавиши
    echo ''
    [[ "$in_viewnior" =~ [^10] ]]
do
    :
done
if [[ $in_viewnior == 0 ]]; then
echo ""
echo " Установка утилит (пакетов) пропущена "
elif [[ $in_viewnior == 1 ]]; then
  echo ""
  echo " Установка Viewer "
sudo pacman -Syy  # обновление баз пакмэна (pacman)  
sudo pacman -S --noconfirm --needed viewnior  #  Простая, быстрая и элегантная программа просмотра изображений ; https://siyanpanayotov.com/project/viewnior ; https://archlinux.org/packages/extra/x86_64/viewnior/
echo ""
echo " Установка утилит (пакетов) выполнена "
fi
###################

clear
echo ""
echo -e "${BLUE}:: ${NC}Установить Gwenview (gwenview) - Просмотрщик изображений?"
echo -e "${MAGENTA}:: ${BOLD}Gwenview — это быстрый и простой в использовании просмотрщик изображений от KDE, идеально подходящий для просмотра и отображения коллекций изображений с возможностями базового редактирования. ${NC}"
echo " Домашняя страница: https://apps.kde.org/gwenview/ ; (https://archlinux.org/packages/kde-unstable/x86_64/gwenview/). "  
echo -e "${MAGENTA}:: ${BOLD}Функции: Простое редактирование изображений: поворот, обрезка, изменение размера, зеркальное отражение, переворот, устранение эффекта красных глаз, настройка яркости, контрастности или гаммы. Добавляйте к изображениям примечания и разметку с помощью стрелок, фигур, текстовых полей, штампов изображений и многого другого. Базовые действия по управлению файлами, такие как переименование, копирование, перемещение, удаление , создание линков и директорий и некоторые другие. Функционирует как отдельное приложение и встроенный просмотрщик в веб-браузере Konqueror. Доступен режим просмотра директорий, при котором, отображается содержимое директории в виде миниатюр, а на директориях, содержащих файлы изображений, отображаются маленькие миниатюры этих изображений. Функциональность Gwenview можно расширить с использованием дополнительных KIPI-плагинов (KDE Image Plugin Interface). ${NC}"
echo " Интерфейс: Главное окно программы в левой части содержит панель с вкладками: вкладку с браузером файлов; вкладку с информацией об изображении; и вкладку с кнопками для редактирования изображения и файловыми операциями. В нижней части можно отобразить полоску с миниатюрами. Основную часть окна занимает непосредственно просматриваемое изображение. Разрабатывается в рамках проекта: KDE; Исходный код: Open Source (открыт); Языки программирования: C; C++; Лицензия: GNU GPL; Приложение переведено на русский язык. " 
echo ""
while
echo " Действия ввода, выполняется сразу после нажатия клавиши "
    read -n1 -p "
    1 - Да установить,     0 - НЕТ - Пропустить установку: " in_gwenview  # sends right after the keypress; # отправляет сразу после нажатия клавиши
    echo ''
    [[ "$in_gwenview" =~ [^10] ]]
do
    :
done
if [[ $in_gwenview == 0 ]]; then
echo ""
echo " Установка утилит (пакетов) пропущена "
elif [[ $in_gwenview == 1 ]]; then
  echo ""
  echo " Установка Gwenview (gwenview) "
sudo pacman -Syy  # обновление баз пакмэна (pacman)
sudo pacman -S --noconfirm --needed gwenview  # Быстрый и простой в использовании просмотрщик изображений ; https://apps.kde.org/gwenview/ ; https://archlinux.org/packages/kde-unstable/x86_64/gwenview/ ; 15 августа 2024 г., 20:58 UTC
echo ""
echo " Установка утилит (пакетов) выполнена "
fi

clear
echo ""
echo -e "${BLUE}:: ${NC}Установить Nomacs (nomacs) - Функциональный просмотрщик изображений?"
echo -e "${MAGENTA}:: ${BOLD}Nomacs — просмотрщик изображений с возможностями обработки фото. Поддерживает все популярные форматы файлов изображений, включая RAW и PSD. Имеет настраиваемы интерфейс. Nomacs распространяется бесплатно и имеет открытый исходный код. Программа кроссплатформенная и может работать в Linux, Windows, MacOS. Работает Nomacs очень быстро, изображения грузятся без задержек. Интерфейс очень отзывчивый. 🍸 ${NC}"
echo " Домашняя страница: https://nomacs.org/ ; (https://aur.archlinux.org/packages/nomacs). "  
echo -e "${MAGENTA}:: ${BOLD}Основные возможности программы Nomacs: Поддержка большого количества форматов файлов-изображений. Поддержка RAW, PSD, векторных форматов. Настраиваемый интерфейс. Возможность включать и отключать элементы интерфейса. Просмотр EXIF информации. Просмотр гистограммы изображений. Просмотр миниатюр во всплывающей панели. Добавление заметок к изображениям. Используется EXIF поле Exif.Image.ImageDescription. Функция Антиалиасинга при просмотре изображений. Специальный безрамочный режим интерфейса Frameless, когда окно программы полностью прозрачное, а просматриваемые изображения открываются в плавающих окнах. Возможность менять прозрачность окна программы. Встроенный проводник файлов. Поиск, фильтрация, сортировка файлов. Режим Слайдшоу. Открытие файлов во внешнем редакторе. Поддержка горячих клавиш. Поддержка вкладок. Специальный режим «Синхронизация» для синхронизации действий между несколькими экземплярами программы. Возможность синхронизации по сети. Приватный режим. Поддержка плагинов для расширения возможностей программы. Плагины могут добавлять новые фильтры, новые возможности редактирования фотографий и другие мини-утилиты. ${NC}"
echo " Nomacs включает в себя средства обработки изображений. Среди них: Обрезка (кроп). Изменение размера. Поворот и отражение. Изменение цветовой палитры. Автокорректировка. Настройка яркости, контрастности, насыщенности, резкости, экспозиции. Фильтр — Крохотная планета, который закручивает изображение. Nomacs имеет несколько встроенных утилит: Утилита для создания многостраничного TIFF-файла. Утилита для извлечения изображений из файлов zip-архивов, офисных документов docx, pptx, xlsx. Утилита для формирования большого изображения-мозаики из нескольких файлов. Утилита для пакетной обработки изображений. Утилита для импорта дополнительных форматов изображений. Интерфейс: Главное окно программы имеет меню в верхней части, под ним расположена панель с кнопками. Остальную часть окна занимает область просмотра изображения и различные панели, которые либо выводят информацию, либо используются для каких-либо действий. " 
echo -e "${CYAN}:: ${NC}Установка Nomacs (nomacs) проходит через сборку из AUR (yay). Если хотите можете собрать пакет через - git clone, PKGBUILD, makepkg - эта функция тоже прописана в сценарии скрипта, НО # закомментирована! "
echo ""
while
echo " Действия ввода, выполняется сразу после нажатия клавиши "
    read -n1 -p "
    1 - Да установить,     0 - НЕТ - Пропустить установку: " in_nomacs  # sends right after the keypress; # отправляет сразу после нажатия клавиши
    echo ''
    [[ "$in_nomacs" =~ [^10] ]]
do
    :
done
if [[ $in_nomacs == 0 ]]; then
echo ""
echo " Установка утилит (пакетов) пропущена "
elif [[ $in_nomacs == 1 ]]; then
  echo ""
  echo " Установка Nomacs (nomacs) "
sudo pacman -Syy  # обновление баз пакмэна (pacman)
######### nomacs ###########
yay -S nomacs --noconfirm  # Просмотрщик изображений Qt ; https://aur.archlinux.org/nomacs.git (только для чтения, нажмите, чтобы скопировать); https://github.com/nomacs/nomacs ; https://aur.archlinux.org/packages/nomacs ; 2024-07-20 11:54 (UTC)
#git clone https://aur.archlinux.org/nomacs.git   # (только для чтения, нажмите, чтобы скопировать)
#cd nomacs
# makepkg -fsri
# makepkg -si
#makepkg -si --noconfirm   #--не спрашивать каких-либо подтверждений
# makepkg -si --skipinteg
#pwd    # покажет в какой директории мы находимся
#cd ..   # поднимаемся на уровень выше (выходим из папки сборки)
# rm -rf nomacs 
#rm -Rf nomacs
# Еще один пакет попадает в список игнорирования - opencv. Обновление до последней версии v4.8.0 приводит к тому, что nomacs больше не открывается при нажатии на изображение. Понижение до версии 4.7.0 исправляет это.
######## nomacs-git ###########
# yay -S nomacs-git --noconfirm  #  Бесплатный просмотрщик изображений с открытым исходным кодом, поддерживающий несколько платформ ; https://aur.archlinux.org/nomacs-git.git (только для чтения, нажмите, чтобы скопировать) ; https://nomacs.org/ ; https://aur.archlinux.org/packages/nomacs-git ; 2023-10-28 00:05 (UTC) ; Конфликты: с nomacs ; git+https://github.com/nomacs/nomacs.git
######## nomacs-qt6-git ###########
# yay -S nomacs-qt6-git --noconfirm  # Просмотрщик изображений Qt ; https://aur.archlinux.org/nomacs-qt6-git.git (только для чтения, нажмите, чтобы скопировать) ; https://nomacs.org/ ; https://aur.archlinux.org/packages/nomacs-qt6-git ; 2024-02-16 15:12 (UTC) ; Конфликты: с nomacs ; git+https://github.com/v-tyrtov/nomacs-plugins.git
echo ""
echo " Установка утилит (пакетов) выполнена "
fi

clear
echo -e "${MAGENTA}
  <<< Установка программ для рисования и редактирования изображений в Archlinux >>> ${NC}"
# Installing programs for drawing and editing images in Archlinux
echo ""
echo -e "${BLUE}:: ${NC}Установить GIMP (для обработки изображений GNU)?"
echo -e "${MAGENTA}:: ${BOLD}GIMP - это растровый графический редактор для Linux. Программа предназначена для создания и обработки растровой графики и частичной поддержкой работы с векторной графикой. ${NC}"
echo " GIMP является почти полноценной альтернативой такой известной программы, как Adobe Photoshop. (https://www.gimp.org/downloads/ ; https://wiki.archlinux.org/title/GIMP ; https://docs.gimp.org/en/gimp-scripting.html) "
echo -e "${YELLOW}==> ${NC}Примечание: плагин Python-Fu недоступен в версии GIMP, распространяемой через официальные репозитории, поскольку для него требуется python2 из AUR (https://aur.archlinux.org/packages/python2), поддержка которого прекращена в 2020 году. Для восстановления функциональности можно использовать python2-gimp из AUR (https://aur.archlinux.org/packages/python2-gimp) (https://aur.archlinux.org/packages?K=gimp-plugin). "
echo " В частности, тема GimpPs направлена ​​на то, чтобы сделать GIMP более похожим на Photoshop, который можно установить поверх GIMP.. (https://github.com/doctormo/GimpPs ; https://github.com/doctormo/GimpPs.git). "
echo " Если же вам нужны только сочетания клавиш, соответствующие строки включены в файл темы menurc, который вы затем можете добавить в свой локальный ~/.config/GIMP/2.10/menurc. "
echo -e "${CYAN}=> ${BOLD}В сценарии (скрипте) присутствуют функция пропуска установки уже установленных пакетов! ${NC}"
echo -e "${CYAN}:: ${NC}Вы МОЖЕТЕ в скрипте закомментировать НЕнужные вам пакеты!"
echo " Будьте внимательны! Процесс установки, был прописан полностью автоматическим. " 
# Be careful! The installation process was fully automatic
echo " Если Вы сомневаетесь в своих действиях, ещё раз обдумайте... "
# If you doubt your actions, think again... 
echo ""
while
echo " Действия ввода, выполняется сразу после нажатия клавиши "
    read -n1 -p "
    1 - Да установить,     0 - НЕТ - Пропустить установку: " in_gimp  # sends right after the keypress; # отправляет сразу после нажатия клавиши
    echo ''
    [[ "$in_gimp" =~ [^10] ]]
do
    :
done
if [[ $in_gimp == 0 ]]; then
echo ""
echo " Установка утилит (пакетов) пропущена "
elif [[ $in_gimp == 1 ]]; then
  echo ""
  echo " Установка GIMP "
sudo pacman -Syy  # обновление баз пакмэна (pacman)  
sudo pacman -S --noconfirm --needed gimp  # Программа обработки изображений GNU ; https://wiki.archlinux.org/title/GIMP
sudo pacman -S --noconfirm --needed gimp-help-en --noconfirm  # Английские файлы справки для GIMP 
sudo pacman -S --noconfirm --needed gimp-help-ru --noconfirm  # Русские файлы справки для GIMP
sudo pacman -S --noconfirm --needed gimp-plugin-gmic --noconfirm  # Плагин Gimp для фреймворка обработки изображений G'MIC ; https://archlinux.org/packages/extra/x86_64/gimp-plugin-gmic/ ; https://docs.gimp.org/en/gimp-scripting.html
sudo pacman -S --noconfirm --needed xsane  # Интерфейс X11 на базе GTK для SANE и плагин для Gimp ; https://gitlab.com/sane-project/frontend/xsane ; https://archlinux.org/packages/extra/x86_64/xsane/
echo ""
echo " Установка утилит (пакетов) выполнена "
fi

clear
echo ""
echo -e "${BLUE}:: ${NC}Установить Pinta (для рисования / редактирования по образцу Paint.NET)?"
echo -e "${MAGENTA}:: ${BOLD}Pinta - это бесплатная программа с открытым исходным кодом для рисования и редактирования изображений. ${NC}"
echo " Его цель — предоставить пользователям простой, но мощный способ рисования и обработки изображений на Linux, Mac, Windows и *BSD (https://www.pinta-project.com/ ; https://github.com/PintaProject/Pinta). "
echo " Pinta — это GTK-клон Paint.Net 3.0. Оригинальный код Pinta лицензирован по лицензии MIT: см. license-mit.txtлицензию MIT. Код Paint.Net 3.36 используется по лицензии MIT и сохраняет оригинальные заголовки в исходных файлах. "
echo -e "${CYAN}=> ${BOLD}В сценарии (скрипте) присутствуют функция пропуска установки уже установленных пакетов! ${NC}"
echo -e "${CYAN}:: ${NC}Вы МОЖЕТЕ в скрипте закомментировать НЕнужные вам пакеты!"
echo " Будьте внимательны! Процесс установки, был прописан полностью автоматическим. " 
# Be careful! The installation process was fully automatic
echo " Если Вы сомневаетесь в своих действиях, ещё раз обдумайте... "
# If you doubt your actions, think again... 
echo ""
while
echo " Действия ввода, выполняется сразу после нажатия клавиши "
    read -n1 -p "
    1 - Да установить,     0 - НЕТ - Пропустить установку: " in_pinta  # sends right after the keypress; # отправляет сразу после нажатия клавиши
    echo ''
    [[ "$in_pinta" =~ [^10] ]]
do
    :
done
if [[ $in_pinta == 0 ]]; then
echo ""
echo " Установка утилит (пакетов) пропущена "
elif [[ $in_pinta == 1 ]]; then
  echo ""
  echo " Установка Pinta "
sudo pacman -S --noconfirm --needed pinta  # Программа для рисования / редактирования по образцу Paint.NET. Его цель - предоставить упрощенную альтернативу GIMP для обычных пользователей ; https://www.pinta-project.com/ ; https://github.com/PintaProject/Pinta
echo ""
echo " Установка утилит (пакетов) выполнена "
fi

clear
echo ""
echo -e "${BLUE}:: ${NC}Установить Krita (Продвинутый графический редактор)?"
echo -e "${MAGENTA}:: ${BOLD}Krita - это бесплатный растровый графический редактор с массой возможностей. Широкая функциональность редактора позволяет использовать его как для обработки фотографий, так и для рисования. ${NC}"
echo " Интуитивно понятный пользовательский интерфейс, который не мешает. Докеры и панели можно перемещать и настраивать под ваш рабочий процесс. После настройки вы можете сохранить ее как свое рабочее пространство. Вы также можете создавать собственные ярлыки для часто используемых инструментов. Настраиваемый макет. Более 30 докеров для дополнительной функциональности. Темные и светлые цветовые темы. "
echo " Домашняя страница: https://krita.org/ ; (https://krita.org/en/features/ ; https://archlinux.org/packages/extra/x86_64/krita/). " 
echo " Krita — Некоторые возможности программы: Поддержка цветовых пространств RGB, CMYK, Lab и Grayscale. Поддержка слоев, масок, каналов. Множество фильтров с просмотром результата в реальном времени. Множество кистей для художников (с настройкой параметров). Импорт новых кистей. Стабилизация при рисовании кистью (если дрожат руки). Создание текстур (размножение объектов на холсте). Псевдо-бесконечный холст, который не имеет размеров. Настраиваемое всплывающее меню быстрого доступа. Настраиваемые горячие клавиши. Открытие и сохранение файлов в формате PSD. И многое другое... "
echo " Программа очень отзывчивая, многие операции выполняются моментально, задержки сведены к минимуму. Для некоторых ресурсозатратных операций используется OpenGL. Внешний вид редактора напомнил мне Photoshop и это явный плюс. Интерфейс выполнен очень аккуратно, все диалоги и элементы находятся на своих местах, компактно и продуманно. Если сравнить его с GIMP, то Krita мне понравился больше (Лучший аналог фотошопа). "
echo -e "${MAGENTA}:: ${BOLD}Изначально Krita был частью офисного пакета Calligra Suite (ранее KOffice), который входил в проект KDE. В 2015 году Krita отделился от Calligra и стал развиваться независимо, это дало сильный толчок в развитии программы. ${NC}"
echo -e "${CYAN}=> ${BOLD}В сценарии (скрипте) присутствуют функция пропуска установки уже установленных пакетов! ${NC}"
echo -e "${CYAN}:: ${NC}Вы МОЖЕТЕ в скрипте закомментировать НЕнужные вам пакеты!"
echo " Будьте внимательны! Процесс установки, был прописан полностью автоматическим. " 
# Be careful! The installation process was fully automatic
echo " Если Вы сомневаетесь в своих действиях, ещё раз обдумайте... "
# If you doubt your actions, think again... 
echo ""
while
echo " Действия ввода, выполняется сразу после нажатия клавиши "
    read -n1 -p "
    1 - Да установить,     0 - НЕТ - Пропустить установку: " in_krita  # sends right after the keypress; # отправляет сразу после нажатия клавиши
    echo ''
    [[ "$in_krita" =~ [^10] ]]
do
    :
done
if [[ $in_krita == 0 ]]; then
echo ""
echo " Установка утилит (пакетов) пропущена "
elif [[ $in_krita == 1 ]]; then
  echo ""
  echo " Установка Krita "
sudo pacman -Syy  # обновление баз пакмэна (pacman)  
sudo pacman -S --noconfirm --needed krita  # Редактировать и раскрашивать изображения ; https://krita.org/ ; https://archlinux.org/packages/extra/x86_64/krita/
############ Плагины ##############
sudo pacman -S --noconfirm --needed krita-plugin-gmic  # Плагин GMic для Krita ; https://github.com/amyspark/gmic ; https://archlinux.org/packages/extra/x86_64/krita-plugin-gmic/ 
sudo pacman -S --noconfirm --needed kseexpr  # Встраиваемый механизм оценки выражений (ответвление Krita) ; https://krita.org/ ; https://archlinux.org/packages/extra/x86_64/kseexpr/
echo ""
echo " Установка утилит (пакетов) выполнена "
fi

clear
echo ""
echo -e "${BLUE}:: ${NC}Установить Inkscape (редактор векторной графики)?"
echo -e "${MAGENTA}:: ${BOLD}Inkscape - это бесплатный векторный графический редактор с открытым исходным кодом для GNU/Linux, Windows и macOS. Он предлагает богатый набор функций и широко используется как для художественных, так и для технических иллюстраций, таких как мультфильмы, клипарты, логотипы, типографика, диаграммы и блок-схемы. Он использует векторную графику для обеспечения четких распечаток и визуализаций с неограниченным разрешением и не привязан к фиксированному количеству пикселей, как растровая графика. Inkscape использует стандартизированный формат файла SVG в качестве основного формата, который поддерживается многими другими приложениями, включая веб-браузеры. Язык интерфейса: русский, английский и другие... Лицензия: GNU GPL v2. ${NC}"
echo " Домашняя страница: https://inkscape.org/ ; (https://archlinux.org/packages/extra/x86_64/inkscape/). "  
echo -e "${MAGENTA}:: ${BOLD}Описание: Он может импортировать и экспортировать различные форматы файлов, включая SVG, AI, EPS, PDF, PS и PNG. Он имеет полный набор функций, простой интерфейс, многоязычную поддержку и разработан с возможностью расширения; пользователи могут настраивать функциональность Inkscape с помощью дополнений. ${NC}" 
echo " Основные особенности и возможности: Позволяет создавать векторную графику различной степени сложности. Поддержка всех основных векторных примитивов. Большие возможности по редактированию векторной графики. Поддержка древовидных слоев. Работа с кривыми. Полная поддержка SVG. Использование SVG в качестве основного формата. "
echo " Поддержка экспорта в форматы: PNG, OpenDocument Drawing, DXF, sk1, PDF, EPS, PostScript. Поддержка опций командной строки для экспорта и конвертации. И многое другое... "
echo " Кто создает Inkscape? Inkscape имеет много авторов, каждый автор сохраняет свои собственные авторские права, и авторы также участвуют в определении технических и проектных целей Inkscape. Есть также много других некодирующих участников, которые считаются важными частями проекта Inkscape. "
echo " Независимо от того, являетесь ли вы иллюстратором, дизайнером, веб-дизайнером или просто тем, кому нужно создавать векторные изображения, Inkscape — это то, что вам нужно! "
echo ""
while
echo " Действия ввода, выполняется сразу после нажатия клавиши "
    read -n1 -p "
    1 - Да установить,     0 - НЕТ - Пропустить установку: " in_inkscape  # sends right after the keypress; # отправляет сразу после нажатия клавиши
    echo ''
    [[ "$in_inkscape" =~ [^10] ]]
do
    :
done
if [[ $in_inkscape == 0 ]]; then
echo ""
echo " Установка утилит (пакетов) пропущена "
elif [[ $in_inkscape == 1 ]]; then
  echo ""
  echo " Установка Inkscape "
sudo pacman -Syy  # обновление баз пакмэна (pacman)  
sudo pacman -S --noconfirm --needed inkscape  # Профессиональный векторный графический редактор ; https://inkscape.org/ ; https://archlinux.org/packages/extra/x86_64/inkscape/ ; 
echo ""
echo " Установка утилит (пакетов) выполнена "
fi
######################## Справка ###################
### Inkscape является членом Software Freedom Conservancy , некоммерческой организации US 501(c)(3). Взносы в Inkscape подлежат налоговому вычету в Соединенных Штатах.
##############################

clear
echo -e "${MAGENTA}
  <<< Установка программ 3D моделирования (создание 3D анимации и рендеренга). Редакторы трехмерной графики >>> ${NC}"
# Installing 3D modeling programs on Linux. Programs for creating 3D animation and rendering. 3D Graphics Editors 
#clear
echo ""
echo -e "${BLUE}:: ${NC}Установить FreeCAD (САПР, 3D геометрическое моделирование)?"
echo -e "${MAGENTA}:: ${BOLD}FreeCAD - это бесплатная САПР, программа для трехмерного геометрического моделирования. Предназначена для создания параметрических объемных объектов различной сложности. Параметрическое моделирование позволяет вам легко изменять свой дизайн, возвращаясь к истории модели и изменяя ее параметры. Язык интерфейса: русский, английский и другие... Лицензия: GNU GPL. ${NC}"
echo " Домашняя страница: https://www.freecad.org/ ; (https://archlinux.org/packages/extra/x86_64/freecad/). "  
echo -e "${MAGENTA}:: ${BOLD}Описание: FreeCAD позволяет создавать параметрические 3D объекты реального мира. Программу можно применять для моделирования в таких областях, как архитектура, машиностроение, промышленный дизайн и других. "
echo " FreeCAD позволяет вам делать наброски геометрически ограниченных 2D-форм и использовать их в качестве основы для построения других объектов. Он содержит множество компонентов для корректировки размеров или извлечения деталей дизайна из 3D-моделей для создания высококачественных готовых к производству чертежей. ${NC}" 
echo " Основные особенности и возможности: Разработка 3D моделей различной степени сложности. Параметрическое 3D моделирование. Архитектурное моделирование. Создание двумерных эскизов. Создание двухмерных эскизов из трехмерных моделей. Получение высококачественных чертежей, готовых для производства. Большой набор инструментов для создания объектов. Большой набор готовых примитивов. Применение графических фильтров. Расстановка размеров объектов. Инструменты для выполнения моделирования и симуляции. Моделирование роботов. Поддержка большого числа форматов. Импорт и экспорт: STEP, IGES, STL, SVG, DXF, OBJ, IFC, DAE и другие. Настраиваемый интерфейс программы, поддерживающий концепцию профилей. Поддержка скриптов. Модульная архитектура программы. И многое другое. "
echo " FreeCAD обладает огромным количеством возможностей. Входной порог относительно низкий, программой смогут пользоваться не только профессионалы, но и менее опытные пользователи, например, студенты и преподаватели. К тому же, в интернете доступно множество руководств и видео-уроков по FreeCAD. "
echo ""
while
echo " Действия ввода, выполняется сразу после нажатия клавиши "
    read -n1 -p "
    1 - Да установить,     0 - НЕТ - Пропустить установку: " in_freecad  # sends right after the keypress; # отправляет сразу после нажатия клавиши
    echo ''
    [[ "$in_freecad" =~ [^10] ]]
do
    :
done
if [[ $in_freecad == 0 ]]; then
echo ""
echo " Установка утилит (пакетов) пропущена "
elif [[ $in_freecad == 1 ]]; then
  echo ""
  echo " Установка FreeCAD "
sudo pacman -Syy  # обновление баз пакмэна (pacman)  
sudo pacman -S --noconfirm --needed freecad  # Параметрический 3D CAD-моделировщик на основе функций ; https://www.freecad.org/ ; (https://archlinux.org/packages/extra/x86_64/freecad/)
echo ""
echo " Установка утилит (пакетов) выполнена "
fi

clear
echo ""
echo -e "${BLUE}:: ${NC}Установить LibreCAD (для создания 2D-чертежей САПР - геометрическое моделирование)?"
echo -e "${MAGENTA}:: ${BOLD}LibreCAD - это LibreCAD — это многофункциональное и зрелое приложение 2D-CAD, обладающее рядом действительно значительных преимуществ. Пользовательский интерфейс переведен на более чем 30 языков. Язык интерфейса: русский, английский и другие... Лицензия: GNU GPL.${NC}"
echo " Домашняя страница: https://www.librecad.org/ ; (https://github.com/LibreCAD/LibreCAD ; https://archlinux.org/packages/extra/x86_64/librecad/). "  
echo -e "${MAGENTA}:: ${BOLD}Описание: LibreCAD использует кроссплатформенную структуру Qt , что означает, что он работает с большинством операционных систем. LibreCAD - это бесплатное приложение САПР с открытым исходным кодом для Windows, Apple и Linux. Поддержка и документация бесплатны благодаря нашему большому преданному сообществу пользователей, участников и разработчиков.  ${NC}" 
echo " Основные особенности и возможности: LibreCAD можно использовать как конвертер dxf в pdf, png или svg. Например, чтобы преобразовать foo.dxf в foo.pdf, foo.png или foo.svg (librecad dxf2pdf foo.dxf ; librecad dxf2png foo.dxf ; librecad dxf2svg foo.dxf). "
echo " Основная ветвь представляет собой последний предварительный код и теперь требует Qt 6.4.0 или более новую версию. Ветка 2.2.1 требует Qt 5.15.0 или более новую версию. Ветка 2.2 требует Qt 5.2.1 или более новую версию. Ветка 2.1 будет последней, поддерживающей Qt4. Ветка 2.0 будет последней, поддерживающей панель инструментов QCAD. "
echo ""
while
echo " Действия ввода, выполняется сразу после нажатия клавиши "
    read -n1 -p "
    1 - Да установить,     0 - НЕТ - Пропустить установку: " in_librecad  # sends right after the keypress; # отправляет сразу после нажатия клавиши
    echo ''
    [[ "$in_librecad" =~ [^10] ]]
do
    :
done
if [[ $in_librecad == 0 ]]; then
echo ""
echo " Установка утилит (пакетов) пропущена "
elif [[ $in_librecad == 1 ]]; then
  echo ""
  echo " Установка LibreCAD "
sudo pacman -Syy  # обновление баз пакмэна (pacman)  
sudo pacman -S --noconfirm --needed librecad  # Инструмент для создания 2D-чертежей САПР на основе общедоступной версии QCad ; https://www.librecad.org/ ; https://archlinux.org/packages/extra/x86_64/librecad/
echo ""
echo " Установка утилит (пакетов) выполнена "
fi
#############


##################
# Программы 3D моделирования в Linux. Программы для создание 3D анимации и рендеренга. Редакторы трехмерной графики для Linux
# https://pingvinus.ru/programs/graphics/3d-modelling
# FreeCAD
# LibreCAD
# Dust3D
# gCAD3D
# Sweet Home 3D
# Blender
##########


clear
echo -e "${MAGENTA}
  <<< Установка программ для захвата видео (Захват видео и создание фотографий с веб-камеры) >>> ${NC}"
# Installing programs for video capture (Capture videos and create photos from a webcam)
#clear
echo ""
echo -e "${BLUE}:: ${NC}Установить Open Broadcaster Software®️ (OBS)?"
echo -e "${MAGENTA}:: ${BOLD}OBS Studio - это бесплатное программное обеспечение с открытым исходным кодом для прямой трансляции и записи (Потоковое вещание и запись скринкастов). ${NC}"
echo " OBS Studio (Open Broadcaster Software) позволяет создавать стримы и записывать видео с различных источников. Программа поддерживает создание сцен, которые могут включать различные источники видео и аудио, а также иметь различные настройки записи видео. Во время трансляции можно переключаться между сценами. Для стриминга программа использует распространенный протокол RTMP. "
echo " Программа на русском языке для записи видео и стримов на Twitch, YouTube, GoodGame, SC2TV, Hitbox.TV и любые другие RTMP-серверы трансляций. Можно добавлять свои сервисы. "
echo ""
while
echo " Действия ввода, выполняется сразу после нажатия клавиши "
    read -n1 -p "
    1 - Да установить,     0 - НЕТ - Пропустить установку: " in_obs  # sends right after the keypress; # отправляет сразу после нажатия клавиши
    echo ''
    [[ "$in_obs" =~ [^10] ]]
do
    :
done
if [[ $in_obs == 0 ]]; then
echo ""
echo " Установка утилит (пакетов) пропущена "
elif [[ $in_obs == 1 ]]; then
  echo ""
  echo " Установка OBS Studio "
sudo pacman -S --noconfirm --needed obs-studio  # Бесплатное программное обеспечение с открытым исходным кодом для прямой трансляции и записи ; https://obsproject.com/ ; https://archlinux.org/packages/extra/x86_64/obs-studio/
echo ""
echo " Установка утилит (пакетов) выполнена "
fi

################
# Захват видео
# Программы для захвата видео в Linux. Захват видео и создание фотографий с веб-камеры.
# https://pingvinus.ru/programs/multimedia/videocapture
# OBS Studio
# Peek
# SimpleScreenRecorder
# Vokoscreen
# Guvcview
# Kazam Screencaster
# RecordMyDesktop
# Cheese
#############################




clear
echo -e "${CYAN}
  <<< Обновление информации о шрифтах >>> ${NC}"
# Updating font information and creating a backup of grub.cfg and grub files.

echo ""
echo -e "${BLUE}:: ${NC}Обновим информацию о шрифтах"
#echo 'Обновим информацию о шрифтах'
# Update information about fonts
sudo fc-cache -f -v

clear
echo -e "${CYAN}
  <<< Очистка кэша pacman, и Удаление всех пакетов-сирот (неиспользуемых зависимостей) >>>
${NC}"
# Clearing the pacman cache, and Removing unused dependencies.
echo ""
echo -e "${YELLOW}==> Примечание: ${NC}Если! Вы сейчас устанавливали "AUR Helper"-'yay' (не yay-bin), а также Snap (пакет snapd) вместе с ними установилась зависимость 'go' - (Основные инструменты компилятора для языка программирования Go), который весит 559,0 МБ. Так, что если вам не нужна зависимость 'go', для дальнейшей сборки пакетов в установленной системе СОВЕТУЮ удалить её. В случае, если "AUR"-'yay', Snap (пакет snapd) НЕ БЫЛИ установлены, или зависимость 'go' была удалена ранее, то пропустите этот шаг."
echo ""
echo -e "${BLUE}:: ${BOLD}Удаление зависимости 'go' после установки "AUR Helper"-'yay', Snap (пакет snapd). ${NC}"
echo -e "${YELLOW}==> ${NC} Будьте внимательны! Если Вы сомневаетесь в своих действиях, ещё раз обдумайте..."
echo ""
while
echo " Действия ввода, выполняется сразу после нажатия клавиши "
    read -n1 -p "
    1 - Да удалить зависимость 'go',     0 - Нет пропустить этот шаг: " rm_tool  # sends right after the keypress; # отправляет сразу после нажатия клавиши
    echo ''
    [[ "$rm_tool" =~ [^10] ]]
do
    :
done
if [[ $rm_tool == 0 ]]; then
  echo ""
echo " Удаление зависимости 'go' пропущено "
elif [[ $rm_tool == 1 ]]; then
echo ""
# sudo pacman -Rs go
#pacman -Rs go
sudo pacman --noconfirm -Rs go    # --noconfirm  --не спрашивать каких-либо подтверждений
 echo ""
 echo " Удаление зависимость 'go' выполнено "
fi

### Clean pacman cache (Очистить кэш pacman) ####
clear
echo ""
echo -e "${BLUE}:: ${BOLD}Очистка кэша pacman 'pacman -Sc' ${NC}"
echo -e "${CYAN}=> ${NC}Очистка кэша неустановленных пакетов (оставив последние версии оных), и репозиториев..."
sudo pacman --noconfirm -Sc  # Очистка кэша неустановленных пакетов (оставив последние версии оных) # --noconfirm  -не спрашивать каких-либо подтверждений

echo ""
echo -e "${CYAN}=> ${NC}Удалить кэш ВСЕХ установленных пакетов 'pacman -Scc' (высвобождая место на диске)?"
echo " Процесс удаления кэша ВСЕХ установленных пакетов - НЕ был прописан полностью автоматическим, и было принято решение дать возможность пользователю сделать выбор! "
echo -e "${YELLOW}==> ${NC} Будьте внимательны! Если Вы сомневаетесь в своих действиях, ещё раз обдумайте..."
echo ""
while
echo " Действия ввода, выполняется сразу после нажатия клавиши "
    read -n1 -p "
    1 - Да удалить кэш,     0 - Нет пропустить этот шаг: " rm_cache  # sends right after the keypress; # отправляет сразу после нажатия клавиши
    echo ''
    [[ "$rm_cache" =~ [^10] ]]
do
    :
done
if [[ $rm_cache == 0 ]]; then
echo ""
echo " Удаление кэша ВСЕХ установленных пакетов пропущено "
elif [[ $rm_cache == 1 ]]; then
sudo pacman -Scc  # Удалит кеш всех пакетов (можно раз в неделю вручную запускать команду)
#sudo pacman --noconfirm -Scc  # --noconfirm  --не спрашивать каких-либо подтверждений
fi

clear
echo ""
echo -e "${BLUE}:: ${NC}Посмотрим список всех пакетов-сирот (которые не используются ни одной программой)"
#echo " Посмотрим список всех пакетов-сирот "
# echo 'Список всех пакетов-сирот'
# List of all orphan packages
sudo pacman -Qdt  # Посмотреть, какие пакеты не используются ничем в системе
#sudo pacman -Qdtq  # Посмотреть, какие пакеты не используются ничем в системе(показать меньше информации для запроса и поиска)
# -----------------------------------
# -Q --query  # Запрос к базе данных
# -d, --deps  # список пакетов, установленных как зависимости
# -t, --unrequired  # список пакетов не (опционально) требуемых
# какими-либо пакетами (-tt для игнорирования optdepends)
# -q, --quiet  # показать меньше информации для запроса и поиска
# ------------------------------------
sleep 3

echo ""
echo -e "${CYAN}=> ${NC}Удаление всех пакетов-сирот (неиспользуемых зависимостей) 'pacman -Qdtq'..."
echo " Процесс удаления всех пакетов-сирот (неиспользуемых зависимостей) - НЕ был прописан полностью автоматическим, и было принято решение дать возможность пользователю сделать выбор. "
echo -e "${YELLOW}==> ${NC} Будьте внимательны! Если Вы сомневаетесь в своих действиях, ещё раз обдумайте..."
echo ""
while
echo " Действия ввода, выполняется сразу после нажатия клавиши "
    read -n1 -p "
    1 - Да удалить все пакеты-сироты,     0 - Нет пропустить этот шаг: " rm_orphans  # sends right after the keypress; # отправляет сразу после нажатия клавиши
    echo ''
    [[ "$rm_orphans" =~ [^10] ]]
do
    :
done
if [[ $rm_orphans == 0 ]]; then
echo ""
echo " Удаление всех пакетов-сирот (неиспользуемых зависимостей) пропущено "
elif [[ $rm_orphans == 1 ]]; then
echo ""
echo " Удаление всех пакетов-сирот (неиспользуемых зависимостей) "
#sudo pacman --noconfirm -Rcsn $(pacman -Qdtq)  # --noconfirm (не спрашивать каких-либо подтверждений), -R --remove (Удалить пакет(ы) из системы), -c, --cascade (удалить пакеты и все пакеты, которые зависят от них), -s, --recursive (удалить ненужные зависимости), -n, --nosave (удалить конфигурационные файлы)
sudo pacman -Rsn $(pacman -Qdtq) && rm -rf ~/.cache/thumbnails/* && rm -rf ~/.build/*
#sudo pacman -Rsn $(pacman -Qqtd)  # удаляет пакеты-сироты (которые не используются ни одной программой)
#sudo rm -rf ~/.cache/thumbnails/*  # удаляет миниатюры фото, которые накапливаются в системе
#sudo rm -rf ~/.build/*  #
# или эта команда:
# sudo pacman -Rsn $(pacman -Qdtq)
### fc-cache -vf
# sudo pacman -Scc && sudo pacman -Rsn $(pacman -Qdtq) && rm -rf ~/.cache/thumbnails/* && rm -rf ~/.build/*
echo ""
echo " Удаление всех пакетов-сирот (неиспользуемых зависимостей) выполнено "
fi

echo ""
echo -e "${BLUE}:: ${NC}Удаление созданной папки (downloads), и скрипта установки программ (archmy3l)"
#echo " Удаление созданной папки (downloads), и скрипта установки программ (archmy3l) "
#echo ' Удаление созданной папки (downloads), и скрипта установки программ (archmy3l) '
# Deleting the created folder (downloads) and the program installation script (archmy3l)
echo -e "${YELLOW}==> Примечание: ${NC}Если таковая (папка) была создана изначально!"
# If it was created initially!
echo " Будьте внимательны! Процесс удаления, был прописан полностью автоматическим. "
# Be careful! Removal process was fully automatic
echo " Если Вы сомневаетесь в своих действиях, ещё раз обдумайте... "
# If you doubt your actions, think again...
echo ""
while
echo " Действия ввода, выполняется сразу после нажатия клавиши "
    read -n1 -p "
    1 - Да удалить папку (downloads),     0 - Нет пропустить этот шаг: " rm_down  # sends right after the keypress; # отправляет сразу после нажатия клавиши
    echo ''
    [[ "$rm_down" =~ [^10] ]]
do
    :
done
if [[ $rm_down == 0 ]]; then
echo ""
echo " Удаление пропущено "
elif [[ $rm_down == 1 ]]; then
echo ""
echo " Удаление папки (downloads), и скрипта установки программ (archmy3l) "
sudo rm -R ~/downloads/  # Если таковая (папка) была создана изначально
sudo rm -rf ~/archmy3l  # Если скрипт не был перемещён в другую директорию
echo " Удаление выполнено "
fi

clear
echo -e "${CYAN}
  <<< Посмотрим и Сохраним список установленного софта (пакетов) >>>
${NC}"
# Let's see and Save the list of installed software (packages).

echo ""
echo -e "${BLUE}:: ${NC}Посмотрим список установленного софта (пакетов)?"
#echo " Посмотрим список Установленного софта (пакетов) "
# echo 'Список Установленного софта (пакетов)'
# List of Installed software (packages)
echo " Список пакетов для просмотра - будет доступен (по времени) в течении 1-ой минуты! "
echo -e "${YELLOW}==> ${NC} Будьте внимательны! Вы можете пропустить это действие..."
echo ""
while
echo " Действия ввода, выполняется сразу после нажатия клавиши "
    read -n1 -p "
    1 - Да вывести список софта (пакетов),     0 - Нет пропустить этот шаг: " t_list  # sends right after the keypress; # отправляет сразу после нажатия клавиши
    echo ''
    [[ "$t_list" =~ [^10] ]]
do
    :
done
if [[ $t_list == 0 ]]; then
echo ""
echo " Вывод списка установленного софта (пакетов) пропущен "
elif [[ $t_list == 1 ]]; then
echo ""
echo " Список установленного софта (пакетов) "
echo ""
sudo pacman -Qqe  # -Q --query  # Запрос к базе данных; -q, --quiet  # показать меньше информации для запроса и поиска; -e, --explicit  # список явно установленных пакетов (фильтр)
echo ""
sleep 60
fi

clear
echo ""
echo -e "${BLUE}:: ${NC}Сохранить список Установленного софта (пакетов)?"
#echo " Сохранить список Установленного софта (пакетов)? "
# Save a list of Installed software (packages)?
echo -e "${CYAN}=> ${NC}В домашней директории пользователя будет создана папка (pkglist), в которой будут созданы и сохранены .txt списки установленного софта (пакетов)..."
echo " Список пакетов будет создан как в подробном, так и в кратком виде - (подробно: pkglist_full.txt; .pkglist.txt; кратко: pkglist.txt; aurlist.txt) "
echo " В дальнейшем Вы можете удалить папку (pkglist), без последствий! "
echo -e "${YELLOW}==> ${NC} Будьте внимательны! Вы можете пропустить это действие..."
echo ""
while
echo " Действия ввода, выполняется сразу после нажатия клавиши "
    read -n1 -p "
    1 - Да сохранить список софта (пакетов),     0 - Нет пропустить этот шаг: " set_pkglist  # sends right after the keypress; # отправляет сразу после нажатия клавиши
    echo ''
    [[ "$set_pkglist" =~ [^10] ]]
do
    :
done
if [[ $set_pkglist == 0 ]]; then
echo ""
echo " Сохранение списка установленного софта (пакетов) пропущено "
elif [[ $set_pkglist == 1 ]]; then
echo ""
echo " Создадим папку (pkglist) в домашней директории "
mkdir ~/pkglist
echo " Сохранение списка установленного софта (пакетов). Подробно "
LANG=C pacman -Sl | awk '/\[installed\]$/ {print $1 "/" $2 "-" $3}' > ~/pkglist/pkglist_full.txt
LANG=C pacman -Sl | awk '/\[installed\]$/ {print $2}' > ~/pkglist/.pkglist.txt
echo " Сохранение списка установленного софта (пакетов). Кратко "
sudo pacman -Qqe > ~/pkglist/pkglist.txt
sudo pacman -Qqm > ~/pkglist/aurlist.txt
echo " Сохранение списка установленного софта (пакетов) выполнено "
fi
###########################################
clear
echo -e "${GREEN}
  <<< Поздравляем! Установка софта (пакетов) завершена! >>> ${NC}"
# Congratulations! Installation is complete.
#echo -e "${GREEN}==> ${NC}Установка завершена!"
#echo 'Установка завершена!'
# The installation is now complete!
echo ""
echo -e "${YELLOW}==> ${NC}Желательно перезагрузить систему для применения изменений"
#echo 'Желательно перезагрузить систему для применения изменений'
# It is advisable to restart the system to apply the changes
echo -e "${BLUE}:: ${BOLD}Посмотрим дату и время ... для проверки времени ${NC}"
date  # Посмотрим дату и время без характеристик для проверки времени
date +'%d/%m/%Y  %H:%M:%S [%:z  %Z]'  # одновременно отображает дату и часовой пояс

echo -e "${BLUE}:: ${BOLD}Отобразить время работы системы ... ${NC}"
uptime

echo -e "${YELLOW}==> ...${NC}"
echo -e "${BLUE}:: ${NC}Если хотите установить дополнительный софт (пакеты), тогда после перезагрузки и входа в систему выполните команду:"
echo -e "${YELLOW}==> ${CYAN}wget git.io/archmy5l && sh archmy5l ${NC}"
# Команды по установке :
# wget git.io/archmy4l
# sh archmy4l
# wget git.io/archmy4 && sh archmy4l --noconfirm
echo -e "${CYAN}:: ${NC}Цель скрипта (archmy4l) - это установка софта (пакетов), включая установку софта (пакетов) из 'AUR'-'yay', и запуск необходимых служб."
echo -e "${CYAN}:: ${NC}Если Вы сомневаетесь в своих действиях, скриптом можно пользоваться как шпаргалкой, открыв его в текстовом редакторе, копируя команды по установке необходимых пакетов."
echo -e "${GREEN}
  <<< Желаю Вам удачи во всех начинаниях, верных и точных решений! >>> ${NC}"
echo ""
echo -e "${GREEN}
  <<< ♥ Либо ты идешь вперед... либо в зад. >>> ${NC}"
#echo '♥ Либо ты идешь вперед... либо в зад.'
# ♥ Either you go forward... or you go up your ass.
# ===============================================
echo -e "${RED}### ${BLUE}########################################################### ${RED}### ${NC}"
echo -e "${RED}==> ${BOLD}Выходим из установленной системы ${NC}"

echo -e "${BLUE}:: ${BOLD}Теперь вам надо ввести exit, затем перезагрузить систему ${NC}"
echo ""
echo " Установка завершена для выхода введите >> exit << "
#exit(0)  # означает чистый выход без каких-либо ошибок (проблем)
#exit(1)  # означает, что была какая-то ошибка (проблема), и именно поэтому программа выходит
#exit
#fi
#clear
# Успех
#Success
#echo "Установка завершена! Перезагрузить."
#echo "Installation complete! Reboot."
##### Шпаргалка запуска необходимых служб #####
### sudo systemctl enable NetworkManager
### sudo systemctl enable bluetooth
### sudo systemctl enable cups.service
### sudo systemctl enable sshd
### sudo systemctl enable avahi-daemon
### sudo systemctl enable tlp # You can comment this command out if you didn't install tlp, see above
### sudo systemctl enable reflector.timer
### sudo systemctl enable fstrim.timer
### sudo systemctl enable libvirtd
### sudo systemctl enable firewalld
### sudo systemctl enable acpid
###**************************
### sudo systemctl disable NetworkManager-wait-online.service
### sudo systemctl disable lvm2-monitor.service
### sudo systemctl disable bluetooth.service
### sudo systemctl disable ModemManager.service
### sudo systemctl disable smartmontools.service
### sudo systemctl disable motd-news.service
### sudo systemctl disable vboxautostart-service
###-------------------------------------------------
### end of script